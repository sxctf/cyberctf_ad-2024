// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: proto/smartbalance.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SmartBalanceService_CheckUser_FullMethodName          = "/smartbalanceApi.SmartBalanceService/CheckUser"
	SmartBalanceService_CreateUser_FullMethodName         = "/smartbalanceApi.SmartBalanceService/CreateUser"
	SmartBalanceService_CoolingSystem_FullMethodName      = "/smartbalanceApi.SmartBalanceService/CoolingSystem"
	SmartBalanceService_CoolingSystemCheck_FullMethodName = "/smartbalanceApi.SmartBalanceService/CoolingSystemCheck"
	SmartBalanceService_Dashboard_FullMethodName          = "/smartbalanceApi.SmartBalanceService/Dashboard"
)

// SmartBalanceServiceClient is the client API for SmartBalanceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SmartBalanceServiceClient interface {
	CheckUser(ctx context.Context, in *CheckUserRequest, opts ...grpc.CallOption) (*CheckUserResponse, error)
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	CoolingSystem(ctx context.Context, in *CoolingSystemRequest, opts ...grpc.CallOption) (*CoolingSystemResponse, error)
	CoolingSystemCheck(ctx context.Context, in *CoolingSystemGetRequest, opts ...grpc.CallOption) (*CoolingSystemGetResponse, error)
	Dashboard(ctx context.Context, in *DashboardRequest, opts ...grpc.CallOption) (*DashboardResponse, error)
}

type smartBalanceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSmartBalanceServiceClient(cc grpc.ClientConnInterface) SmartBalanceServiceClient {
	return &smartBalanceServiceClient{cc}
}

func (c *smartBalanceServiceClient) CheckUser(ctx context.Context, in *CheckUserRequest, opts ...grpc.CallOption) (*CheckUserResponse, error) {
	out := new(CheckUserResponse)
	err := c.cc.Invoke(ctx, SmartBalanceService_CheckUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smartBalanceServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, SmartBalanceService_CreateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smartBalanceServiceClient) CoolingSystem(ctx context.Context, in *CoolingSystemRequest, opts ...grpc.CallOption) (*CoolingSystemResponse, error) {
	out := new(CoolingSystemResponse)
	err := c.cc.Invoke(ctx, SmartBalanceService_CoolingSystem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smartBalanceServiceClient) CoolingSystemCheck(ctx context.Context, in *CoolingSystemGetRequest, opts ...grpc.CallOption) (*CoolingSystemGetResponse, error) {
	out := new(CoolingSystemGetResponse)
	err := c.cc.Invoke(ctx, SmartBalanceService_CoolingSystemCheck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smartBalanceServiceClient) Dashboard(ctx context.Context, in *DashboardRequest, opts ...grpc.CallOption) (*DashboardResponse, error) {
	out := new(DashboardResponse)
	err := c.cc.Invoke(ctx, SmartBalanceService_Dashboard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SmartBalanceServiceServer is the server API for SmartBalanceService service.
// All implementations must embed UnimplementedSmartBalanceServiceServer
// for forward compatibility
type SmartBalanceServiceServer interface {
	CheckUser(context.Context, *CheckUserRequest) (*CheckUserResponse, error)
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	CoolingSystem(context.Context, *CoolingSystemRequest) (*CoolingSystemResponse, error)
	CoolingSystemCheck(context.Context, *CoolingSystemGetRequest) (*CoolingSystemGetResponse, error)
	Dashboard(context.Context, *DashboardRequest) (*DashboardResponse, error)
	mustEmbedUnimplementedSmartBalanceServiceServer()
}

// UnimplementedSmartBalanceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSmartBalanceServiceServer struct {
}

func (UnimplementedSmartBalanceServiceServer) CheckUser(context.Context, *CheckUserRequest) (*CheckUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUser not implemented")
}
func (UnimplementedSmartBalanceServiceServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedSmartBalanceServiceServer) CoolingSystem(context.Context, *CoolingSystemRequest) (*CoolingSystemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CoolingSystem not implemented")
}
func (UnimplementedSmartBalanceServiceServer) CoolingSystemCheck(context.Context, *CoolingSystemGetRequest) (*CoolingSystemGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CoolingSystemCheck not implemented")
}
func (UnimplementedSmartBalanceServiceServer) Dashboard(context.Context, *DashboardRequest) (*DashboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Dashboard not implemented")
}
func (UnimplementedSmartBalanceServiceServer) mustEmbedUnimplementedSmartBalanceServiceServer() {}

// UnsafeSmartBalanceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SmartBalanceServiceServer will
// result in compilation errors.
type UnsafeSmartBalanceServiceServer interface {
	mustEmbedUnimplementedSmartBalanceServiceServer()
}

func RegisterSmartBalanceServiceServer(s grpc.ServiceRegistrar, srv SmartBalanceServiceServer) {
	s.RegisterService(&SmartBalanceService_ServiceDesc, srv)
}

func _SmartBalanceService_CheckUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmartBalanceServiceServer).CheckUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmartBalanceService_CheckUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmartBalanceServiceServer).CheckUser(ctx, req.(*CheckUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmartBalanceService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmartBalanceServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmartBalanceService_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmartBalanceServiceServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmartBalanceService_CoolingSystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoolingSystemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmartBalanceServiceServer).CoolingSystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmartBalanceService_CoolingSystem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmartBalanceServiceServer).CoolingSystem(ctx, req.(*CoolingSystemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmartBalanceService_CoolingSystemCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoolingSystemGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmartBalanceServiceServer).CoolingSystemCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmartBalanceService_CoolingSystemCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmartBalanceServiceServer).CoolingSystemCheck(ctx, req.(*CoolingSystemGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmartBalanceService_Dashboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DashboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmartBalanceServiceServer).Dashboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmartBalanceService_Dashboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmartBalanceServiceServer).Dashboard(ctx, req.(*DashboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SmartBalanceService_ServiceDesc is the grpc.ServiceDesc for SmartBalanceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SmartBalanceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "smartbalanceApi.SmartBalanceService",
	HandlerType: (*SmartBalanceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckUser",
			Handler:    _SmartBalanceService_CheckUser_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _SmartBalanceService_CreateUser_Handler,
		},
		{
			MethodName: "CoolingSystem",
			Handler:    _SmartBalanceService_CoolingSystem_Handler,
		},
		{
			MethodName: "CoolingSystemCheck",
			Handler:    _SmartBalanceService_CoolingSystemCheck_Handler,
		},
		{
			MethodName: "Dashboard",
			Handler:    _SmartBalanceService_Dashboard_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/smartbalance.proto",
}
